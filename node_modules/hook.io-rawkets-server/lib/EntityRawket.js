/**************************************************
** RAWKET ENTITY
**************************************************/

var util = require("util"),
	Entity = require("./Entity").Entity,
	Euler = require("./Euler").Euler;

var EntityRawket = exports.EntityRawket = function (options) {
	var self = this;

	self.onBeforeInit();

	// Indexes for each type of rawket action
	// Must be a power of 2 for bitwise operations (1, 2, 4, 8, etc)
	self.actionTypes = {
		THRUST: 1,
		SHOOT: 2
	};

	self.id = options.id || null; // Nothing to do with the player id, used to grab entity from a list of entities
	self.pos = options.pos || {x: 0, y: 0};
	self.vel = options.vel || {x: 0, y: 0};
	self.angle = options.angle || 0;
	self.thrust = 800; // Distance per second
	self.dimensions = options.dimensions || {w: 10, h: 20};
	self.player = options.player || null; // Player object that owns this entity
	self.action = 0; // Mirror of player actions

	self.onAfterInit();
};

// EntityRawket inherits from Entity
util.inherits(EntityRawket, Entity);

EntityRawket.prototype.move = function(currentTime, timeDelta) {
	var self = this;

	if (self.dead) {
		return;
	}

	// 1. Update rawket physics
	var currentState = {},
		newState = {};

	currentState.pos = self.pos;
	currentState.vel = self.vel;
	currentState.angle = self.angle;
	currentState.force = self.is(self.actionTypes.THRUST) ? self.thrust : 0;
	
	newState = Euler.integrate(currentState, timeDelta);

	self.pos = newState.pos;
	self.vel = newState.vel;
};

EntityRawket.prototype.remove = function() {
	// 1. Run inherited method
	RawketEntity.super_.remove.call(this);

	// 2. Define who killed you and the cause of death
};

// Check rawket action using bitwise
EntityRawket.prototype.is = function(action) {
	var self = this;
	
	return (self.action & action) == action;
};

// Set rawket action based on state (true/false) using bitwise
EntityRawket.prototype.set = function(action, state) {
	var self = this;

	self.action = state ? self.action | action : self.action & ~action;
};