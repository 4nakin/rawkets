/**************************************************
** PLAYER MANAGER
**************************************************/

var util = require("util");

var Player = exports.Player = function (options) {
	var self = this;

	// Indexes for each type of player action
	// Must be a power of 2 for bitwise operations (1, 2, 4, 8, etc)
	self.actionTypes = {
		THRUST: 1,
		SHOOT: 2
	};

	self.id = options.id || null;
	self.respawnTime = options.respawnTime || 0;
	self.score = options.score || 0;
	self.dead = options.dead || 0;
	self.entity = options.entity || null;
	self.action = options.action || 0; // Representation of player actions (thrust, shoot, etc)
};

// Return a representation of the player right now
Player.prototype.getRepresentation = function() {
	var self = this,
		player = {};

	player.id = self.id;
	player.respawnTime = self.respawnTime;
	player.score = self.score;
	player.dead = self.dead;
	player.action = self.action;

	if (!self.dead && self.entity) {
		player.pos = self.entity.pos;
		player.vel = self.entity.vel;
		player.angle = self.entity.angle;
	}

	return player;
};

// Check player action using bitwise
Player.prototype.is = function(action) {
	var self = this;
	
	return (self.action & action) == action;
};

// Set player action using bitwise
Player.prototype.set = function(action) {
	var self = this;

	return self.action |= action;
};