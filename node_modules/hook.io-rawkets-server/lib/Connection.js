/**************************************************
** CONNECTION MANAGER
**************************************************/

// Much of this is based on logic from WPilot

var io = require("socket.io"),
	util = require("util");

var Connection = exports.Connection = function (options) {
	var self = this;

	self.messagePriorities = {
		HIGH: 2, // Send with the upmost urgency
		LOW: 1, // Send without getting in the way of high priority messages
		PASS: 0 // Do not send message
	};

	self.connectionStates = {
		CONNECTED: 1, // When player has connected but hasn't been authenticated
		HANDSHAKING: 2, // When player is being authenticated
		JOINED: 3, // When player has been authenticated
		DISCONNECTED: 4 // When player has disconnected
	};

	self.connection = io.listen(options.port); // Socket manager
	self.connections = {}; // Connected clients
	self.connectionCount = 0; // Number of connected clients
	self.maxConnections = 10; // Maximum amount of connected clients (not maximum amount of players in a world)
	self.messageTypes = options.messageTypes || {};
	self.typeIndexes = options.typeIndexes || {};
	self.debug = options.debug || false;

	// Configure Socket.IO
	self.connection.set("log level", 2);
	self.connection.set("transports", [
		"websocket"
	]);

	// Set up core methods
	self.init();

	// Initialise listeners
	self.initListeners();
};

Connection.prototype.init = function() {
	var self = this,
		Socket = io.Socket;

	Socket.prototype.queue = [];
	Socket.prototype.remoteAddress = null;
	Socket.prototype.state = null;

	// Set the state of the connection
	Socket.prototype.setState = function(state) {
		var client = this;

		switch (state) { 
			case self.connectionStates.CONNECTED:
				// Kick player if there are too many connections 
				if (++self.connectionCount > self.maxConnections) {
					client.kill("Too many connections");
					return;
				}

				client.queue = [];
				client.updateRate = 2;
				client.remoteAddress = client.handshake.address.address;

				self.connections[client.id] = client;

				// Send message types to client
				client.sendMessageTypes();

				// Method that can be overridden in game world
				self.onConnected(client);

				if (self.debug) {
					util.log("New player has connected: "+client.id);
				}
				break;
			case self.connectionStates.HANDSHAKING:
				// Method that can be overridden in game world
				self.onHandshaking(client);
				break;
			case self.connectionStates.JOINED:
				// Method that can be overridden in game world
				self.onJoined(client);
				break;
			case self.connectionStates.DISCONNECTED:
				delete self.connections[client.id];
				self.connectionCount--;

				// Method that can be overridden in game world
				self.onDisconnected(client);

				if (self.debug) {
					util.log("Player has disconnected: "+client.id);
				}
				break;
		}

		client.state = state;
	};

	// Disconnect player
	Socket.prototype.kill = function(reason) {
		var client = this,
			msg = reason || "Unknown reason";

		client.emit("disconnect", msg);
		client.onDisconnect();
	};

	// Add message to queue
	Socket.prototype.queueMessage = function(args) {
		var client = this,
			msg = self.encodeMessage(args);

		if (client.state !== self.connectionStates.JOINED) {
			return;
		}

		client.queue.push(msg);
	};

	// Flush messages queue
	Socket.prototype.flushQueue = function() {
		var client = this,
			packet;

		if (client.queue.length === 0) {
			return;
		}

		packet = client.queue.join(",");

		client.emit("message", packet);

		client.queue = [];
	};

	// Send a message directly to the player, bypassing the queue
	Socket.prototype.send = function(args) {
		var client = this,
			msg = self.encodeMessage(args);

		client.emit("message", msg);
	};

	// Send message types to the player
	Socket.prototype.sendMessageTypes = function() {
		var client = this,
			msg = JSON.stringify({messageTypes: self.messageTypes, typeIndexes: self.typeIndexes});

		client.emit("messageTypes", msg);
	};
};

Connection.prototype.initListeners = function() {
	var self = this;

	self.connection.sockets.on("connection", function(client) {
		client.on("disconnect", function() {
			client.setState(self.connectionStates.DISCONNECTED);
		});

		client.on("message", function(packet) {
			var msg = self.decodeMessage(packet);

			util.log(util.inspect(msg));

			self.processMessage(msg, client);
		});

		// If we got here then assume the player has connected
		client.setState(self.connectionStates.CONNECTED);
	});
};

Connection.prototype.encodeMessage = function(args) {
	var self = this,
		msg = args.join("|");

	return msg;
};

Connection.prototype.decodeMessage = function(msg) {
	var self = this,
		msgParts = msg.split("|"),
		typeIndex = parseInt(msgParts.shift(), 10),
		type = self.messageTypes[typeIndex],
		args = {};

	msgParts.forEach(function(arg, index) {
		args[type.args[index]] = arg;
	});

	return {typeIndex: typeIndex, type: type, args: args};
};

// Do something with the message sent from the client (overridden)
Connection.prototype.processMessage = function(msg, client) {};

// Broadcast a message to all connected players
// No priority logic so all messages are sent immediately
Connection.prototype.broadcast = function(args) {
	var self = this,
		msg = self.encodeMessage(args);
	
	for (var id in self.connections) {
		var client = self.connections[id];
		client.queue.push(msg);
	}
};

// Broadcast a message to all connected players
// Callback defines priority for each connection
Connection.prototype.broadcastEach = function(args, callback) {
	var self = this,
		msg = self.encodeMessage(args);
	
	for (var id in self.connections) {
		var client = self.connections[id],
			priority = callback(client);

		// Skip messages with the pass priority
		if (priority === self.messagePriorities.PASS) {
			continue;
		}

		// Additional logic will go here to manage high and low priority messages
		// For now all messages with a priority other than pass are treated equally

		client.queue.push(msg);
	}
};

// Flush messages queue
Connection.prototype.flushQueues = function() {
	var self = this;
	
	for (var id in self.connections) {
		var client = self.connections[id];
		client.flushQueue();
	}
};

// Called on new player connection (to be overridden)
Connection.prototype.onConnected = function(client) {};

// Called on handshaking of player connection (to be overridden)
Connection.prototype.onHandshaking = function(client) {};

// Called on player successfully joining the game (to be overridden)
Connection.prototype.onJoined = function(client) {};

// Called on player disconnection (to be overridden)
Connection.prototype.onDisconnected = function(client) {};